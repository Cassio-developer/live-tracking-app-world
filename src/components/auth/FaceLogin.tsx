import React, { useState, useRef, useEffect, useCallback } from 'react';
import { 
  detectFace, 
  startVideoStream, 
  stopVideoStream, 
  drawFaceLandmarks,
  isFaceRecognitionSupported,
  loadFaceModels,
  FaceDetectionResult 
} from '../../utils/faceRecognition';
import { faceAuthService, FaceLoginResponse } from '../../services/faceAuthService';
import { useAuth } from '../../contexts/AuthContext';
import './FaceLogin.css';

interface FaceLoginProps {
  onLoginError: (error: string) => void;
  onCancel: () => void;
  className?: string;
}

const FaceLogin: React.FC<FaceLoginProps> = ({
  onLoginError,
  onCancel,
  className = ''
}) => {
  const { setUserDirectly } = useAuth();
  const videoRef = useRef<HTMLVideoElement>(null);
  const canvasRef = useRef<HTMLCanvasElement>(null);
  const streamRef = useRef<MediaStream | null>(null);
  
  const [isLoading, setIsLoading] = useState(true);
  const [isDetecting, setIsDetecting] = useState(false);
  const [faceDetected, setFaceDetected] = useState(false);
  const [detectionCount, setDetectionCount] = useState(0);
  const [error, setError] = useState<string | null>(null);
  const [isSupported, setIsSupported] = useState(false);
  const [hasFaceData, setHasFaceData] = useState(false);
  const [checkingFaceData, setCheckingFaceData] = useState(true);
  const [loginAttempted, setLoginAttempted] = useState(false);
  const loginAttemptedRef = useRef(false);

  // Verificar suporte ao reconhecimento facial
  useEffect(() => {
    const checkSupport = () => {
      const supported = isFaceRecognitionSupported();
      setIsSupported(supported);
      
      if (!supported) {
        setError('Seu dispositivo n√£o suporta reconhecimento facial');
        setIsLoading(false);
        setCheckingFaceData(false);
        return;
      }

      // N√£o verificamos dados faciais aqui - deixamos o login facial tentar
      // Se n√£o houver dados, o backend retornar√° erro apropriado
      setHasFaceData(true); // Assumimos que pode ter dados
      setCheckingFaceData(false);
    };

    checkSupport();
  }, []);

  // Fun√ß√£o para inicializar c√¢mera
  const initializeCamera = useCallback(async () => {
    console.log('üé• initializeCamera chamada');
    try {
      setIsLoading(true);
      
      // Primeiro carregar os modelos
      console.log('üîÑ Carregando modelos de reconhecimento facial...');
      const modelsLoaded = await loadFaceModels();
      
      if (!modelsLoaded) {
        console.log('‚ùå Falha ao carregar modelos');
        setError('Erro ao carregar modelos de reconhecimento facial');
        setIsLoading(false);
        return;
      }
      
      console.log('‚úÖ Modelos carregados, inicializando c√¢mera...');
      
      // Depois inicializar a c√¢mera
      if (videoRef.current) {
        console.log('üé• Iniciando stream de v√≠deo...');
        const stream = await startVideoStream(videoRef.current);
        streamRef.current = stream;
        
        if (stream) {
          console.log('‚úÖ Stream iniciado, iniciando detec√ß√£o facial...');
          setIsLoading(false);
          // Aguardar um pouco antes de iniciar detec√ß√£o
          setTimeout(() => {
            console.log('üîç Iniciando detec√ß√£o ap√≥s delay...');
            startFaceDetection();
          }, 1000);
        } else {
          console.log('‚ùå Falha ao iniciar stream');
          setError('N√£o foi poss√≠vel acessar a c√¢mera');
          setIsLoading(false);
        }
      } else {
        console.log('‚ùå Elemento de v√≠deo n√£o encontrado');
        setError('Elemento de v√≠deo n√£o encontrado');
        setIsLoading(false);
      }
    } catch (error) {
      console.error('‚ùå Erro ao inicializar c√¢mera:', error);
      setError('Erro ao acessar c√¢mera. Verifique as permiss√µes.');
      setIsLoading(false);
    }
  }, []);

  // Aguardar elemento de v√≠deo estar dispon√≠vel
  useEffect(() => {
    console.log('üîç useEffect - Verificando condi√ß√µes para inicializar c√¢mera:', {
      isSupported,
      hasFaceData,
      checkingFaceData,
      streamExists: !!streamRef.current
    });
    
    if (!isSupported || !hasFaceData || checkingFaceData) {
      console.log('‚ùå Condi√ß√µes n√£o atendidas para inicializar c√¢mera');
      return;
    }

    // Verificar se j√° foi inicializado
    if (streamRef.current) {
      console.log('‚úÖ C√¢mera j√° foi inicializada');
      return;
    }

    console.log('‚úÖ Iniciando processo de inicializa√ß√£o da c√¢mera...');
    let attempts = 0;
    const maxAttempts = 50; // 5 segundos m√°ximo

    const waitForVideoElement = () => {
      attempts++;
      
      if (videoRef.current) {
        console.log('‚úÖ Elemento de v√≠deo encontrado, inicializando c√¢mera...');
        initializeCamera();
      } else if (attempts < maxAttempts) {
        console.log(`‚è≥ Aguardando elemento de v√≠deo... (${attempts}/${maxAttempts})`);
        setTimeout(waitForVideoElement, 100);
      } else {
        console.log('‚ùå Timeout: Elemento de v√≠deo n√£o encontrado ap√≥s 5 segundos');
        setError('Erro ao inicializar c√¢mera. Tente recarregar a p√°gina.');
        setIsLoading(false);
      }
    };

    waitForVideoElement();

    // Cleanup
    return () => {
      console.log('üßπ Cleanup do useEffect - parando stream e detec√ß√£o');
      setIsDetecting(false);
      loginAttemptedRef.current = true;
      setLoginAttempted(true);
      if (streamRef.current) {
        stopVideoStream(streamRef.current);
        streamRef.current = null;
      }
    };
  }, [isSupported, hasFaceData, checkingFaceData, initializeCamera]);

  // Login com face detectada
  const handleFaceLogin = useCallback(async (descriptor: Float32Array) => {
    console.log('üîê handleFaceLogin chamada - loginAttempted:', loginAttempted, 'ref:', loginAttemptedRef.current);
    
    // Verificar se j√° est√° tentando login
    if (loginAttemptedRef.current) {
      console.log('üõë Login j√° foi tentado, ignorando nova tentativa');
      return;
    }
    
    // Marcar como tentado IMEDIATAMENTE para evitar m√∫ltiplas chamadas
    loginAttemptedRef.current = true;
    setLoginAttempted(true);

    try {
      console.log('üîê Iniciando processo de login facial...');
      setIsDetecting(false);
      setIsLoading(true);
      
      console.log('üîê Tentando login com reconhecimento facial...');
      
      const response: FaceLoginResponse = await faceAuthService.loginWithFace(descriptor);
      
      if (response.success && response.user) {
        console.log('‚úÖ Login facial realizado com sucesso');
        // Parar completamente a detec√ß√£o e stream
        setIsDetecting(false);
        setLoginAttempted(true);
        setIsLoading(false); // Resetar loading
        if (streamRef.current) {
          stopVideoStream(streamRef.current);
          streamRef.current = null;
        }
        console.log('üõë Parando completamente ap√≥s login bem-sucedido');
        
        // Atualizar o contexto de autentica√ß√£o diretamente
        console.log('‚úÖ Atualizando contexto de autentica√ß√£o com usu√°rio:', response.user);
        setUserDirectly(response.user);
        console.log('‚úÖ Contexto de autentica√ß√£o atualizado com sucesso');
        
        return; // Sair da fun√ß√£o imediatamente
      } else {
        console.log('‚ùå Login facial falhou:', response.message);
        
        // Verificar se √© erro de dados n√£o encontrados
        if (response.message.includes('Nenhum usu√°rio com dados faciais encontrado') || 
            response.message.includes('Face n√£o reconhecida')) {
          setError('Voc√™ ainda n√£o configurou o reconhecimento facial. Fa√ßa login com senha primeiro e configure nas configura√ß√µes do perfil.');
        } else {
          setError(response.message);
        }
        
        setIsLoading(false);
        setLoginAttempted(false); // Reset para permitir nova tentativa
        // N√ÉO retomar detec√ß√£o automaticamente - deixar o usu√°rio tentar novamente
      }
    } catch (error: any) {
      console.error('‚ùå Erro no login facial:', error);
      
      // Verificar se √© erro de rede ou servidor
      if (error.message && error.message.includes('Token n√£o fornecido')) {
        setError('Voc√™ ainda n√£o configurou o reconhecimento facial. Fa√ßa login com senha primeiro e configure nas configura√ß√µes do perfil.');
      } else {
        setError('Erro interno no login facial. Tente novamente.');
      }
      
      setIsLoading(false);
      setLoginAttempted(false); // Reset para permitir nova tentativa
      // N√ÉO retomar detec√ß√£o automaticamente - deixar o usu√°rio tentar novamente
    }
  }, [loginAttempted, onLoginError]);

  // Detec√ß√£o cont√≠nua de face
  const startFaceDetection = useCallback(() => {
    console.log('üîç startFaceDetection chamada - isDetecting:', isDetecting, 'loginAttempted:', loginAttempted);
    

    
    if (!videoRef.current || !canvasRef.current) {
      console.log('‚ùå Elementos de v√≠deo ou canvas n√£o encontrados');
      return;
    }

    console.log('‚úÖ Iniciando detec√ß√£o facial...');
    
    // Resetar estado de login
    loginAttemptedRef.current = false;
    setLoginAttempted(false);
    setDetectionCount(0);
    
    // Configurar canvas
    const canvas = canvasRef.current;
    const video = videoRef.current;
    
    canvas.width = video.videoWidth;
    canvas.height = video.videoHeight;
    
    console.log('üìê Canvas configurado:', { width: canvas.width, height: canvas.height });

    // Configurar estado de detec√ß√£o
    setIsDetecting(true);
    
    const detectLoop = async () => {
      console.log('üîÑ Loop de detec√ß√£o iniciado - loginAttempted:', loginAttempted);
      
      // Verificar se os elementos ainda existem
      if (!videoRef.current || !canvasRef.current) {
        console.log('‚ùå Elementos de v√≠deo ou canvas n√£o encontrados no loop');
        setIsDetecting(false);
        return;
      }

      // Parar imediatamente se j√° tentou fazer login
      if (loginAttemptedRef.current) {
        console.log('üõë Parando detec√ß√£o - login j√° tentado');
        setIsDetecting(false);
        return;
      }
      
      // Verificar se o contador j√° chegou a 3 para evitar continuar desnecessariamente
      if (detectionCount >= 3) {
        console.log('üõë Parando detec√ß√£o - contador j√° chegou a 3');
        setIsDetecting(false);
        return;
      }

      try {
        debugger;
        console.log('üîç Chamando detectFace...');
        const detection: FaceDetectionResult = await detectFace(videoRef.current);
        console.log('üîç Resultado da detec√ß√£o:', detection.success ? 'Sucesso' : 'Falha', detection.error || '');
        console.log('üîç Detalhes da detec√ß√£o:', {
          success: detection.success,
          hasLandmarks: !!detection.landmarks,
          hasDescriptor: !!detection.descriptor,
          error: detection.error
        });
        
        if (detection.success && detection.landmarks) {
          setFaceDetected(true);
          setError(null);
          
          // Desenhar landmarks (temporariamente desabilitado)
          // const displaySize = {
          //   width: videoRef.current.videoWidth,
          //   height: videoRef.current.videoHeight
          // };
          // 
          // drawFaceLandmarks(canvasRef.current, detection, displaySize);
          
          // Tentar login ap√≥s 3 detec√ß√µes consecutivas
          setDetectionCount(prev => {
            const newCount = prev + 1;
            console.log('üîç Contador de detec√ß√£o:', newCount, '/ 3');
            
            if (newCount >= 3 && detection.descriptor && !loginAttemptedRef.current) {
              console.log('üîê Tentando login ap√≥s 3 detec√ß√µes consecutivas');
              // Chamar login imediatamente
              if (detection.descriptor) {
                handleFaceLogin(detection.descriptor);
              }
            }
            return newCount;
          });
        } else {
          setFaceDetected(false);
          setDetectionCount(0);
          
          // Limpar canvas
          const ctx = canvasRef.current.getContext('2d');
          if (ctx) {
            ctx.clearRect(0, 0, canvasRef.current.width, canvasRef.current.height);
          }
        }
      } catch (error) {
        console.error('‚ùå Erro na detec√ß√£o:', error);
        // Parar detec√ß√£o em caso de erro
        setIsDetecting(false);
        return;
      }

      // Continuar loop apenas se n√£o tentou login
      console.log('üîç Verificando se deve continuar loop - loginAttempted:', loginAttempted, 'ref:', loginAttemptedRef.current);
      
      // Verifica√ß√£o rigorosa antes de continuar
      if (loginAttemptedRef.current) {
        console.log('üõë Parando loop - login j√° tentado');
        setIsDetecting(false);
        return;
      }
      
      console.log('‚úÖ Continuando loop de detec√ß√£o');
      // Verificar novamente antes de agendar pr√≥xima itera√ß√£o
      if (!loginAttemptedRef.current) {
        setTimeout(detectLoop, 100); // Usar setTimeout em vez de requestAnimationFrame
      } else {
        console.log('üõë Cancelando pr√≥xima itera√ß√£o - login j√° tentado');
        setIsDetecting(false);
      }
    };

    console.log('üîÑ Configurando estado de detec√ß√£o...');
    setIsDetecting(true);
    console.log('üöÄ Iniciando loop de detec√ß√£o...');
    // Aguardar um pouco para o estado ser atualizado
    setTimeout(() => {
      detectLoop();
    }, 50);
  }, [loginAttempted, detectionCount]);

  // Parar detec√ß√£o
  const stopFaceDetection = useCallback(() => {
    console.log('üõë stopFaceDetection chamada');
    setIsDetecting(false);
    loginAttemptedRef.current = true;
    setLoginAttempted(true);
  }, []);



  // Cleanup quando componente √© desmontado
  useEffect(() => {
    return () => {
      console.log('üßπ Cleanup do componente FaceLogin');
      setIsDetecting(false);
      loginAttemptedRef.current = true;
      setLoginAttempted(true);
      setIsLoading(false);
      if (streamRef.current) {
        stopVideoStream(streamRef.current);
        streamRef.current = null;
      }
    };
  }, []);

  // Cancelar login
  const handleCancel = () => {
    stopFaceDetection();
    if (streamRef.current) {
      stopVideoStream(streamRef.current);
    }
    onCancel();
  };

  if (!isSupported) {
    return (
      <div className={`face-login-container ${className}`}>
        <div className="face-login-error">
          <div className="error-icon">‚ö†Ô∏è</div>
          <h3>Dispositivo N√£o Suportado</h3>
          <p>Seu dispositivo n√£o suporta reconhecimento facial.</p>
          <button onClick={handleCancel} className="btn-secondary">
            Voltar
          </button>
        </div>
      </div>
    );
  }

  if (checkingFaceData) {
    return (
      <div className={`face-login-container ${className}`}>
        <div className="face-login-loading">
          <div className="loading-spinner"></div>
          <h3>Verificando Configura√ß√£o</h3>
          <p>Verificando se voc√™ tem reconhecimento facial configurado...</p>
        </div>
      </div>
    );
  }

  return (
    <div className={`face-login-container ${className}`}>
      <div className="face-login-header">
        <h3>üë§ Login com Reconhecimento Facial</h3>
        <p>Posicione seu rosto no centro da tela</p>
      </div>

      <div className="camera-container">
        {/* Elementos de v√≠deo sempre renderizados */}
        <video
          ref={videoRef}
          autoPlay
          muted
          playsInline
          className="camera-video"
          style={{ display: isLoading ? 'none' : 'block' }}
        />
        
        <canvas
          ref={canvasRef}
          className="face-canvas"
          style={{ display: isLoading ? 'none' : 'block' }}
        />
        
        {/* Overlay de loading */}
        {isLoading && (
          <div className="loading-overlay">
            <div className="loading-spinner"></div>
            <p>Inicializando c√¢mera...</p>
          </div>
        )}
        
        {/* Status da face */}
        {!isLoading && (
          <div className="face-status">
            {faceDetected ? (
              <div className="status-detected">
                <span className="status-icon">‚úÖ</span>
                <span>Face detectada</span>
                {detectionCount > 0 && (
                  <span className="detection-count">
                    ({detectionCount}/3)
                  </span>
                )}
              </div>
            ) : (
              <div className="status-not-detected">
                <span className="status-icon">‚ùå</span>
                <span>Nenhuma face detectada</span>
              </div>
            )}
          </div>
        )}
      </div>

      {error && (
        <div className="error-message">
          <span className="error-icon">‚ö†Ô∏è</span>
          <span>{error}</span>
        </div>
      )}

      <div className="face-login-instructions">
        <div className="instruction-item">
          <span className="instruction-icon">üí°</span>
          <span>Mantenha uma boa ilumina√ß√£o</span>
        </div>
        <div className="instruction-item">
          <span className="instruction-icon">üì±</span>
          <span>Mantenha o dispositivo est√°vel</span>
        </div>
        <div className="instruction-item">
          <span className="instruction-icon">üëÅÔ∏è</span>
          <span>Olhe diretamente para a c√¢mera</span>
        </div>
      </div>

      <div className="face-login-actions">
        <button 
          onClick={handleCancel}
          className="btn-secondary"
          disabled={isLoading && !loginAttempted}
        >
          Cancelar
        </button>
        
        {error && !isDetecting && (
          <button 
            onClick={() => {
              setError('');
              setLoginAttempted(false);
              setDetectionCount(0);
              startFaceDetection();
            }}
            className="btn-primary"
            disabled={isLoading}
          >
            Tentar Novamente
          </button>
        )}
        
        <button 
          onClick={() => window.location.reload()}
          className="btn-secondary"
          disabled={isLoading && !loginAttempted}
        >
          Recarregar
        </button>
      </div>
    </div>
  );
};

export default FaceLogin; 